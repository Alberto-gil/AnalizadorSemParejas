package AnalizadorLex_Sem;

import java.util.ArrayList;
import java.util.Vector;

public class Lexic {
    private String contenido = "", caracteres = "0123456789aAbBcCdDeEfFgGhHiIjJkKlLmMnN��oOpPqQrRsStTuUvVwWxXyYzZ.-+*/'_;,(){}\"=!<>&\n\t $:", token = "", nombre, componente;
    private int est = 0, pos = 0, cursor = 0, aux, i;
    private byte arr[][]= {
            //    0  1  2  3  4  5  6  7  8  9 a  A  b  B  c  C  d  D  e  E  f  F  g  G  h  H  i  I  j  J  k  K  l  L  m  M  n  N  �  �  o  O  p  P  q  Q  r  R  s  S  t  T  u  U  v  V  w  W  x  X  y  Y  z  Z  .  -  +  *  /  '  _  ;  ,  (  )  {  }  "  =  !  <  >  &  \n \t    $  :
            /*0*/   { 7, 1, 1, 1, 1, 1, 1, 1, 1, 1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,22,12,12,12,13,-1,17,17,17,17,17,17,18,20,20,20,20,12,34,34,30,32,17},
            /*1*/   { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 2,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*2*/   { 2, 3, 3, 3, 3, 3, 3, 3, 3, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*3*/	{ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,-1,-1,-1,-1,-1,-1,-1,-1, 4, 4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*4*/	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 5, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            /*5*/	{-1, 6, 6, 6, 6, 6, 6, 6, 6, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            /*6*/	{ 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*7*/	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*8*/	{ 9,10,10,10,10,10,10,10,10,10,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            /*9*/	{10,11,11,11,11,11,11,11,11,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*10*/	{10,11,11,11,11,11,11,11,11,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*11*/	{11,11,11,11,11,11,11,11,11,11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,31,31,-1,-1,31,31,-1,31,-1,-1,-1,31,31,31,31,31,30,30,30,32,31},
            /*12*/	{31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,32,-1},
            /*13*/	{14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14},
            /*14*/	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,-1,-1,-1,-1,-1},
            /*15*/	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,-1,31,-1,-1,-1,-1,-1,-1,-1,31,30,30,30,32,31},
            /*16*/	{16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,31,31,31,31,-1,16,31,31,31,31,31,-1,-1,31,31,31,31,31,30,30,30,31,31},
            /*17*/	{31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,30,30,30,31,31},
            /*18*/	{18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,18,18,18,18,18,18,18,18,18,18},
            /*19*/	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,31,31,-1,31,-1,-1,-1,-1,-1,-1,-1,31,30,30,30,32,31},
            /*20*/	{31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,22,-1,-1,-1,31,-1,31,31,31,31,-1,-1,31,31,-1,-1,-1,-1,30,30,30,31,-1},
            /*21*/	{31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-1,22,-1,-1,-1,31,-1,31,31,31,31,-1,-1,31,-1,-1,-1,-1,-1,30,30,30,32,-1},
            /*22*/	{23, 1, 1, 1, 1, 1, 1, 1, 1, 1,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-1,-1,-1,-1,-1,-1,-1,31,-1,31,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,32,-1},
            /*23*/	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,24,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1},
            /*24*/	{24, 3, 3, 3, 3, 3, 3, 3, 3, 3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,33,-1},
            /*25*/  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,30,30,30,30,32,-1}
    };
    private String reservadas[] = {"int","float","char","str","bool","do","while","switch","case","default","break", "or","and","print","readInt",
            "readFloat","readStr","readChar","true","false","$"};
    private String simbolos = "/*-+{}()&;,=!<>:";
    private String tipoVar, token_ant;
    private boolean isVar = false; //Para saber si es una variable num, str, bool

    int renglon = 1, encon = -1, columna = 0;

    public Vector<String> noms = new Vector<String>(), valores = new Vector<String>(),
            tipos = new Vector<String>(), comps = new Vector<String>();

    ArrayList<Vector<String>> tablaP = new ArrayList<>();


    public Boolean isError = false;
    public StringBuilder msgError;
    public Lexic() {
        tablaP.add(noms);
        tablaP.add(valores);
        tablaP.add(tipos);
        tablaP.add(comps);
        msgError = new StringBuilder();
    }
    public void setContenido(String contenido) {
        this.contenido = contenido;
    }

    void prueba(String arr[]) {
        prueba(	new String[] {"Hola"});
    }

    public String getContenido() {
        return contenido;
    }

    public String getToken_ant() {
        return token_ant;
    }
    public void nuevoToken() {
        token = "";
        est = 0;
        aux = 0;
        for(; cursor < contenido.length(); cursor++) {

            if(contenido.charAt(cursor)=='\n') {
                columna = 0;
                renglon++;
            }else if(contenido.charAt(cursor)=='\t')
                columna+=4;

            pos = caracteres.indexOf(contenido.charAt(cursor));
            if(pos != -1) {
                aux = est;
                est = arr[est][pos];

                if(est != -1) {
                    if(est == 30) {
                        est = 0;
                        cursor++;
                        columna++;
                        break;
                    }else if(est == 31){
                        est = 0;
                        break;
                    }else if(est == 32){
                        est = 0;
                        token = "$";
                        cursor++;
                        columna++;
                        break;
                    }else if(est == 22) {
                        int tem = cursor;

                        Character sigCar = new Character(contenido.charAt(tem+1));
                        while(Character.isWhitespace(sigCar)){
                            tem++;
                            sigCar = new Character(contenido.charAt(tem+1));

                        }
                        sigCar = new Character(contenido.charAt(tem));
                        if(Character.isDigit(sigCar) || Character.isLetter(sigCar) || sigCar=='-') {
                            if(!componente.equals("num") && !componente.equals("id"))
                                token="-";

                            else if(sigCar.equals('-')) {
                                est = 0;
                                token="-";
                                cursor++;
                                columna++;
                                break;
                            }
                        }else if(sigCar.equals('-') && componente.equals("-"))
                            token="-";
                        else{
                            est = 0;
                            token = "-";
                            cursor+=2;
                            break;
                        }
                        /////////////////////////////////////////////////////////////////////////////
                    }else if(est ==34) {
                        if(contenido.charAt(cursor+1)=='\n')
                            cursor++;

                        est=0;
                        token="";
                        continue;
                    }else
                        token+=contenido.charAt(cursor);

                }else {
                    est = aux;
                    isError = true;
                    msgError.append("Error lexico: renglon: "+getRenglon()+" columna: "+columna +" el caracter "+contenido.charAt(cursor-1)+" no es valido");
                    break;
                }
            }else{
                isError = true;
                msgError.append("Error lexico: renglon: "+getRenglon()+" columna: "+columna +" el caracter "+contenido.charAt(cursor)+" no es valido");

                break;
            }
            columna++;
        }

        if(token.length()!=0) {
            this.setComponente(token);
            this.setNombre(token);
            if(isVar) {
                if(noms.indexOf(token)==-1) {
                    noms.add(token);
                    valores.add(token);
                    tipos.add(tipoVar);
                    comps.add(componente);
                    isVar = false;
                }
                isVar = false;
            }else if(token.equals("true") || token.equals("false")) {
                noms.add(token);
                valores.add(token);
                tipos.add("bool");
                comps.add(componente);
            }
        }

    }

    public String getNombre() {

        return token;
    }

    public void setNombre(String token) {
        if(nombre != null)
            if(nombre.length()>0)
                token_ant = nombre;
        nombre = token;

    }

    public String getComponente() {
        return componente;
    }

    public void setComponente(String token) {
        if("0123456789".indexOf(token.charAt(0))!=-1) {
            componente = "num";

            if(token.indexOf(".")!= -1) //Si es decimal
                tipoVar = "float";
            else
                tipoVar = "int";

            isVar = true;
        }else if(token.startsWith("\"")) {
            componente = "literal";
            tipoVar = "str";
            isVar = true;
        }else if(token.startsWith("\'")){
            componente="car";
            tipoVar = "char";
            isVar = true;
        }else {
            for(i = 0; i < reservadas.length; i++)
                if(token.equals(reservadas[i])) {
                    componente = reservadas[i];
                    break;
                }
            if(i== reservadas.length)
                if(simbolos.indexOf(token)!=-1)
                    componente = token;
                else if(simbolos.charAt(0)== '-')
                    componente = "num";
                else
                    componente = "id";
        }
    }

    public int getCursor() {
        return cursor;
    }
    public void setCursor(int cursor) {
        this.cursor = cursor;
    }

    public int getRenglon() {
        return renglon;
    }

    public int getColumna() {
        return columna;
    }

    public Boolean isError() {
        return isError;
    }

    public void setError(Boolean val) {
        isError = val;
    }

    public StringBuilder getMsgError() {
        return msgError;
    }

    public ArrayList<Vector<String>> getTSimbolos() {
        return tablaP;
    }


}
